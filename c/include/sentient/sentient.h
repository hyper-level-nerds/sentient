#ifndef __SENTIENT_SENTIENT_H__
#define __SENTIENT_SENTIENT_H__

#include <stddef.h>

/**
 * @file sentient.h
 * @author Jin (jaehwanspin@gmail.com)
 * @brief 
 * @version 0.1
 * @date 2022-04-04
 * 
 * @copyright Copyright (c) 2022
 * 
 */

//#include <sentient/core_c.h>

#ifdef __cplusplus
extern "C"
{
#endif

enum sentient_types
{
    SENTIENT_TYPES_MODEL = 0,
    SENTIENT_TYPES_STR8,
    SENTIENT_TYPES_STR16,
    SENTIENT_TYPES_STR32,
    SENTIENT_TYPES_U8,
    SENTIENT_TYPES_U16,
    SENTIENT_TYPES_U32,
    SENTIENT_TYPES_U64,
    SENTIENT_TYPES_I8,
    SENTIENT_TYPES_I16,
    SENTIENT_TYPES_I32,
    SENTIENT_TYPES_I64,
    SENTIENT_TYPES_F32,
    SENTIENT_TYPES_F64,
    SENTIENT_TYPES_SCDT32,
    SENTIENT_TYPES_SCDT64,
    SENTIENT_TYPES_POINTER,
};

struct sentient_field_info
{
    const char* field_type;
    const char* field_name;
    size_t size;
    size_t offset;
    int is_signed;
    int array_size;
    enum sentient_types data_type;
};

struct sentient_type_info
{
    const char* name;
    size_t fields_count;
    size_t size;
    size_t packed_size;
    struct sentient_field_info* fields;
};

#define SENTIENT_EXPAND_(X) X
#define SENTIENT_EXPAND_VA_(...) __VA_ARGS__
#define SENTIENT_FOREACH_1_(FNC, USER_DATA, ARG) FNC(ARG, USER_DATA)
#define SENTIENT_FOREACH_2_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_1_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_3_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_2_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_4_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_3_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_5_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_4_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_6_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_5_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_7_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_6_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_8_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_7_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_9_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_8_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_10_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_9_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_11_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_10_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_12_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_11_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_13_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_12_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_14_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_13_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_15_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_14_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_16_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_15_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_17_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_16_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_18_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_17_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_19_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_18_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_20_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_19_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_21_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_20_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_22_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_21_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_23_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_22_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_24_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_23_(FNC, USER_DATA, __VA_ARGS__))
#define SENTIENT_FOREACH_25_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) SENTIENT_EXPAND_(SENTIENT_FOREACH_24_(FNC, USER_DATA, __VA_ARGS__))

#define SENTIENT_OVERRIDE_4(_1, _2, _3, _4, FNC, ...) FNC
#define SENTIENT_OVERRIDE_4_PLACEHOLDER 1, 2, 3, 4
#define SENTIENT_OVERRIDE_5(_1, _2, _3, _4, _5, FNC, ...) FNC
#define SENTIENT_OVERRIDE_5_PLACEHOLDER SENTIENT_OVERRIDE_4_PLACEHOLDER, 5
#define SENTIENT_OVERRIDE_14(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, FNC, ...) FNC
#define SENTIENT_OVERRIDE_14_PLACEHOLDER SENTIENT_OVERRIDE_5_PLACEHOLDER, 6, 7, 8, 9, 10, 11, 12, 13, 14
#define SENTIENT_OVERRIDE_20(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, FNC, ...) FNC
#define SENTIENT_OVERRIDE_20_PLACEHOLDER SENTIENT_OVERRIDE_14_PLACEHOLDER, 15, 16, 17, 18, 19, 20
#define SENTIENT_OVERRIDE_25(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, FNC, ...) FNC
#define SENTIENT_OVERRIDE_25_PLACEHOLDER SENTIENT_OVERRIDE_20_PLACEHOLDER, 21, 22, 23, 24, 25

#define SENTIENT_FOREACH(FNC, USER_DATA, ...) \
    SENTIENT_EXPAND_(SENTIENT_OVERRIDE_25( __VA_ARGS__,	\
    SENTIENT_FOREACH_25_, \
    SENTIENT_FOREACH_24_, \
    SENTIENT_FOREACH_23_, \
    SENTIENT_FOREACH_22_, \
    SENTIENT_FOREACH_21_, \
    SENTIENT_FOREACH_20_, \
    SENTIENT_FOREACH_19_, \
    SENTIENT_FOREACH_18_, \
    SENTIENT_FOREACH_17_, \
    SENTIENT_FOREACH_16_, \
    SENTIENT_FOREACH_15_, \
    SENTIENT_FOREACH_14_, \
    SENTIENT_FOREACH_13_, \
    SENTIENT_FOREACH_12_, \
    SENTIENT_FOREACH_11_, \
    SENTIENT_FOREACH_10_, \
    SENTIENT_FOREACH_9_, \
    SENTIENT_FOREACH_8_, \
    SENTIENT_FOREACH_7_, \
    SENTIENT_FOREACH_6_, \
    SENTIENT_FOREACH_5_, \
    SENTIENT_FOREACH_4_, \
    SENTIENT_FOREACH_3_, \
    SENTIENT_FOREACH_2_, \
    SENTIENT_FOREACH_1_)(FNC, USER_DATA, __VA_ARGS__))

#define SENTIENT_DECLARE_SIMPLE_FIELD_(IGNORE, TYPE, FIELD_NAME) \
    TYPE FIELD_NAME;
#define SENTIENT_DECLARE_ARRAY_FIELD_(IGNORE, TYPE, FIELD_NAME, ARRAY_SIZE) \
    TYPE FIELD_NAME[ARRAY_SIZE];

#define SENTIENT_DECLARE_FIELD_(...) SENTIENT_EXPAND_(SENTIENT_OVERRIDE_4( \
    __VA_ARGS__, \
    SENTIENT_DECLARE_ARRAY_FIELD_, \
    SENTIENT_DECLARE_SIMPLE_FIELD_, \
    SENTIENT_OVERRIDE_4_PLACEHOLDER)(__VA_ARGS__))

#define SENTIENT_DECLARE_FIELD(X, USER_DATA) SENTIENT_DECLARE_FIELD_ X

#define SENTIENT_SIZEOF_(IGNORE, C_TYPE, ...) +sizeof(C_TYPE)
#define SENTIENT_SIZEOF(X, USER_DATA) SENTIENT_SIZEOF_ X

#define SENTIENT_SUM(...) +1

#define SENTIENT_IS_TYPE_SIGNED_(C_TYPE) (C_TYPE)-1 < (C_TYPE)1
// #define SENTIENT_IS_SIGNED_STRUCT(C_TYPE) 0
// #define SENTIENT_IS_SIGNED_STRING(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
// #define SENTIENT_IS_SIGNED_INTEGER(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
// #define SENTIENT_IS_SIGNED_FLOAT(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
// #define SENTIENT_IS_SIGNED_DOUBLE(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
// #define SENTIENT_IS_SIGNED_POINTER(C_TYPE) 0

#define SENTIENT_IS_SIGNED_STR8(C_TYPE) 0
#define SENTIENT_IS_SIGNED_STR16(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_STR32(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_U8(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_U16(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_U32(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_U64(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_I8(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_I16(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_I32(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_I64(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_F32(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_F64(C_TYPE) SENTIENT_IS_TYPE_SIGNED_(C_TYPE)
#define SENTIENT_IS_SIGNED_SCDT32(C_TYPE) 0
#define SENTIENT_IS_SIGNED_SCDT64(C_TYPE) 0
#define SENTIENT_IS_SIGNED_POINTER(C_TYPE) 0


#define SENTIENT_IS_SIGNED_(DATA_TYPE, CTYPE) SENTIENT_IS_SIGNED_##DATA_TYPE(CTYPE)

#define SENTIENT_ARRAY_FIELD_INFO_(TYPE_NAME, DATA_TYPE, C_TYPE, FIELD_NAME, ARRAY_SIZE) \
    #C_TYPE, #FIELD_NAME, sizeof(C_TYPE) * ARRAY_SIZE, offsetof(TYPE_NAME, FIELD_NAME), \
    SENTIENT_IS_SIGNED_(DATA_TYPE, C_TYPE), ARRAY_SIZE, SENTIENT_TYPES_##DATA_TYPE

#define SENTIENT_SIMPLE_FIELD_INFO_(TYPE_NAME, DATA_TYPE, C_TYPE, FIELD_NAME) \
    #C_TYPE, #FIELD_NAME, sizeof(C_TYPE), offsetof(TYPE_NAME, FIELD_NAME), \
    SENTIENT_IS_SIGNED_(DATA_TYPE, C_TYPE), -1, SENTIENT_TYPES_##DATA_TYPE

#define SENTIENT_FIELD_INFO_(...) \
{ \
    SENTIENT_EXPAND_(SENTIENT_OVERRIDE_5( \
    __VA_ARGS__, \
    SENTIENT_ARRAY_FIELD_INFO_, \
    SENTIENT_SIMPLE_FIELD_INFO_, \
    SENTIENT_OVERRIDE_5_PLACEHOLDER)(__VA_ARGS__)) \
},

#define SENTIENT_FIELD_INFO(X, USER_DATA) \
    SENTIENT_FIELD_INFO_(USER_DATA, SENTIENT_EXPAND_VA_ X)

#ifdef SENTIENT_IMPL

#define SENTIENT_DEFINE_GET_METHOD(TYPE_NAME, ...) \
    struct sentient_type_info* sentient_get_##TYPE_NAME##_type_info(void) \
    { \
        static struct sentient_field_info fields_info[SENTIENT_FOREACH(SENTIENT_SUM, 0, __VA_ARGS__)] = \
        { \
            SENTIENT_FOREACH(SENTIENT_FIELD_INFO, struct TYPE_NAME, __VA_ARGS__) \
        }; \
        static struct sentient_type_info type_info = \
        { \
            #TYPE_NAME, \
            SENTIENT_FOREACH(SENTIENT_SUM, 0, __VA_ARGS__), \
            sizeof(struct TYPE_NAME), \
            SENTIENT_FOREACH(SENTIENT_SIZEOF, 0, __VA_ARGS__), \
            fields_info \
        }; \
        return &type_info; \
    }

#else

#define SENTIENT_DEFINE_GET_METHOD(TYPE_NAME, ...)

#endif /* SENTIENT_IMPL */

#define SENTIENT_DEFINE_MODEL(TYPE_NAME, ...) \
struct TYPE_NAME \
{ \
    SENTIENT_FOREACH(SENTIENT_DECLARE_FIELD, 0, __VA_ARGS__) \
} __attribute__((packed)) ; \
struct sentient_type_info* sentient_get_##TYPE_NAME##_type_info(void); \
SENTIENT_DEFINE_GET_METHOD(TYPE_NAME, __VA_ARGS__) \


#ifdef __cplusplus
}
#endif

#endif